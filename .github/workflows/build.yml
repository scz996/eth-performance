name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 步骤1：检出代码仓库
      - name: Checkout repository
        uses: actions/checkout@v2

      # 步骤2：设置 JDK 版本
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      # 步骤3：构建项目
      - name: Build with Maven
        run: mvn package

      # 步骤4：上传构建产物
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: target/ethStats.jar

      # 步骤5：安装 @octokit/core
      - name: Install @octokit/core
        run: npm install @octokit/core

      # 步骤6：更新 Release
      - name: Update Release
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const artifactPath = 'target/ethStats.jar';
            const artifactName = 'ethStats.jar';

            const { Octokit } = require("@octokit/core");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            const { owner, repo } = context.repo;

            const tag = 'v1.0.0';  // 替换为实际的标签名称
            const releaseName = 'v1.0.0';  // 替换为实际的 Release 名称

            // 查找指定标签的 Release
            const { data: releases } = await octokit.request(`GET /repos/${owner}/${repo}/releases/tags/${tag}`);
            if (releases.length === 0) {
              core.setFailed(`Release '${tag}' not found.`);
              return;
            }

            const releaseId = releases[0].id;
            const uploadUrl = `https://uploads.github.com/repos/${owner}/${repo}/releases/${releaseId}/assets?name=${artifactName}`;
            const file = fs.readFileSync(artifactPath);

            await octokit.request(uploadUrl, {
              method: 'POST',
              headers: {
                'content-type': 'application/java-archive',
                'content-length': file.length,
              },
              data: file,
            });

            // 更新 Release 名称和描述
            await octokit.request(`PATCH /repos/${owner}/${repo}/releases/${releaseId}`, {
              tag_name: tag,
              name: releaseName,
              body: 'Your updated release notes.',
            });
